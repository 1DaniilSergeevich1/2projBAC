import SoapySDR
import numpy as np
import matplotlib.pyplot as plt
import time
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SDR
FREQ_CHANNEL_1 = 400.0e6  # –ù–∞—á–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
SAMPLE_RATE = 2e6         # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
GAIN = 30                 # –£—Å–∏–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞
JAMMING_THRESHOLD = -15   # –ü–æ—Ä–æ–≥ –≥–ª—É—à–µ–Ω–∏—è (dB)
NUM_AVG = 10              # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π
BUFF_SIZE = 1024          # –†–∞–∑–º–µ—Ä FFT
SCAN_RANGE = 100e6        # –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–π —á–∞—Å—Ç–æ—Ç—ã
FREQ_STEP = 1e6           # –®–∞–≥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

# –ü—É—Ç—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
output_dir = '/home/dreumn/Desktop/project'
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

output_file = os.path.join(output_dir, 'frequency_data.txt')


# –ü–æ–¥–∫–ª—é—á–∞–µ–º HackRF –¥–ª—è –ø—Ä–∏—ë–º–∞
sdr = SoapySDR.Device({'driver': 'hackrf'})
sdr.setSampleRate(SoapySDR.SOAPY_SDR_RX, 0, SAMPLE_RATE)
sdr.setGain(SoapySDR.SOAPY_SDR_RX, 0, GAIN)

sr = sdr.setupStream(SoapySDR.SOAPY_SDR_RX, "CF32")
sdr.activateStream(sr)


# === –ü–ï–†–ï–î–ê–ß–ê –ü–ê–ö–ï–¢–ê ===
def transmit_packet(freq):
    """–ü–µ—Ä–µ–¥–∞—ë—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª-–ø–∞–∫–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–µ"""
    duration = 0.1  # 100 –º—Å
    freq_offset = 100e3  # –ß–∞—Å—Ç–æ—Ç–∞ —Å–º–µ—â–µ–Ω–∏—è –≤ —Å–∏–≥–Ω–∞–ª–µ (100 –∫–ì—Ü)
    amplitude = 0.5  # –ê–º–ø–ª–∏—Ç—É–¥–∞ (–º–∞–∫—Å. 1.0)

    t = np.arange(0, duration, 1 / SAMPLE_RATE)
    signal = amplitude * np.exp(2j * np.pi * freq_offset * t)  # —Å–∏–Ω—É—Å

    tx = SoapySDR.Device({'driver': 'hackrf'})
    tx.setSampleRate(SoapySDR.SOAPY_SDR_TX, 0, SAMPLE_RATE)
    tx.setGain(SoapySDR.SOAPY_SDR_TX, 0, 30)
    tx.setFrequency(SoapySDR.SOAPY_SDR_TX, 0, freq)

    stream = tx.setupStream(SoapySDR.SOAPY_SDR_TX, "CF32")
    tx.activateStream(stream)
    tx.writeStream(stream, [signal.astype(np.complex64)], len(signal))
    tx.deactivateStream(stream)
    tx.closeStream(stream)

    print(f"üì° –ü–µ—Ä–µ–¥–∞–Ω –≤–∏–¥–∏–º—ã–π –ø–∞–∫–µ—Ç –Ω–∞ {freq/1e6:.1f} –ú–ì—Ü (—Å–º–µ—â–µ–Ω–∏–µ +{freq_offset/1e3:.0f} –∫–ì—Ü)")


# === –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï ===
def get_power_spectrum(center_freq):
    sdr.setFrequency(SoapySDR.SOAPY_SDR_RX, 0, center_freq)
    buff = np.zeros(BUFF_SIZE, dtype=np.complex64)
    timeoutUs = int(1e6)
    ret = sdr.readStream(sr, [buff], len(buff), timeoutUs)
    
    if ret.ret > 0:
        spectrum = np.fft.fftshift(np.fft.fft(buff[:ret.ret]))
        power = 10 * np.log10(np.abs(spectrum) ** 2 + 1e-10)
        return power
    else:
        return np.array([])

def scan_spectrum(center_freq):
    power_acc = np.zeros(BUFF_SIZE)
    for _ in range(NUM_AVG):
        power = get_power_spectrum(center_freq)
        if len(power) > 0:
            power_acc += power
    return power_acc / NUM_AVG

def find_best_frequency(current_freq):
    best_freq = current_freq
    min_noise = float('inf')
    for freq in np.arange(current_freq - SCAN_RANGE / 2, current_freq + SCAN_RANGE / 2, FREQ_STEP):
        power_avg = scan_spectrum(freq)
        avg_power = np.mean(power_avg)
        if avg_power < min_noise:
            min_noise = avg_power
            best_freq = freq
    return best_freq


# === –ú–û–ù–ò–¢–û–†–ò–ù–ì + –ü–ï–†–ï–î–ê–ß–ê ===
def monitor_channel():
    current_freq = FREQ_CHANNEL_1
    freq_list = [current_freq]

    plt.ion()
    fig, ax = plt.subplots()
    ax.set_title("–†–∞–¥–∏–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π —Å–ø–µ–∫—Ç—Ä")
    ax.set_xlabel("–ß–∞—Å—Ç–æ—Ç–∞ (–ú–ì—Ü)")
    ax.set_ylabel("–ú–æ—â–Ω–æ—Å—Ç—å (dB)")
    ax.set_xlim(0, 700)
    ax.set_ylim(0, -100)

    lines = []
    last_tx_time = time.time()

    try:
        with open(output_file, 'w') as f:
            while True:
                power_avg = scan_spectrum(current_freq)
                freqs = np.linspace(current_freq - SAMPLE_RATE/2, current_freq + SAMPLE_RATE/2, BUFF_SIZE) / 1e6

                if len(lines) < len(freq_list):
                    line, = ax.plot([], [], label=f"{current_freq / 1e6:.1f} –ú–ì—Ü")
                    lines.append(line)
                line = lines[len(freq_list) - 1]
                line.set_xdata(freqs)
                line.set_ydata(power_avg)

                ax.autoscale_view()
                plt.draw()

                avg_power = np.mean(power_avg)
                print(f"üîç –°—Ä–µ–¥–Ω—è—è –º–æ—â–Ω–æ—Å—Ç—å –Ω–∞ {current_freq / 1e6:.1f} –ú–ì—Ü: {avg_power:.2f} dB")
                f.write(f"–ß–∞—Å—Ç–æ—Ç–∞: {current_freq / 1e6:.1f} –ú–ì—Ü, –°—Ä–µ–¥–Ω—è—è –º–æ—â–Ω–æ—Å—Ç—å: {avg_power:.2f} dB\n")

                # === –ì–ª—É—à–µ–Ω–∏–µ ===
                if avg_power > JAMMING_THRESHOLD:
                    print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≥–ª—É—à–µ–Ω–∏–µ –Ω–∞ {current_freq / 1e6:.1f} –ú–ì—Ü!")
                    next_freq = find_best_frequency(current_freq)
                    if next_freq != current_freq:
                        print(f"üîÅ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ {next_freq / 1e6:.1f} –ú–ì—Ü...")
                        current_freq = next_freq
                        freq_list.append(current_freq)
                        transmit_packet(current_freq)

                # === –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –ø–∞–∫–µ—Ç–∞ ===
                if time.time() - last_tx_time > 10:
                    transmit_packet(current_freq)
                    last_tx_time = time.time()

                plt.pause(0.1)

    except KeyboardInterrupt:
        print("‚èπ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    finally:
        sdr.deactivateStream(sr)
        sdr.closeStream(sr)
        plt.show()


# === –ó–ê–ü–£–°–ö ===
monitor_channel()
